#!/usr/bin/env ruby

require 'highline/import'

begin
  require 'secretsharing'
rescue LoadError
  require 'rubygems'
  require 'secretsharing'
end

include SecretSharing::Shamir

# FIXME : Need to be able to specify bitlength of random secret
# FIXME : Need tests
# FIXME : Allow specify a fixed secret that is a num or a String

# Build up a Hash of all of the options chosen
choices = {}

say("\nShamir's Secret Sharing\n")

say("\nWould you like to 'encode' a new secret as shares, or 'decode' one from existing shares?\n")
choose do |menu|
  menu.prompt = 'Action? '

  menu.choice(:encode) do
    choices[:action] = :encode
  end

  menu.choice(:decode) do
    choices[:action] = :decode
  end
end

if choices[:action] == :encode

  say("\nWould you like to create a 'random' secret, or will you provide a 'fixed' one?\n")
  choose do |menu|
    menu.prompt = 'Type? '

    menu.choice(:random) do
      choices[:secret_type] = :random
    end

    menu.choice(:fixed) do
      choices[:secret_type] = :fixed
    end
  end

  if choices[:secret_type] == :fixed
    choices[:secret_password] = ask('Enter your numeric password:  ', Integer) { |q| q.validate = /^[0-9]+$/ }
  end

  choices[:secret_n] = ask('How many total shares (n) do you want to distribute?  ', Integer) { |q| q.in = 2..512 }
  choices[:secret_k] = ask('How many of the total shares (k) are required to reveal the secret?  ', Integer) { |q| q.in = 2..512 }

  @c = SecretSharing::Shamir::Container.new(choices[:secret_n], choices[:secret_k])

  if choices[:secret_type] == :fixed
    @c.secret = SecretSharing::Shamir::Secret.new(:secret => choices[:secret_password])
  else
    @c.secret = SecretSharing::Shamir::Secret.new
  end

  say("\n========================================\n")
  say("Encoded Secret:\n\n")
  say("(k) Value: #{choices[:secret_k]}\n")
  say("(n) Value: #{choices[:secret_n]}\n")
  say("\n")
  say("Secret (Bignum): \n")
  say(@c.secret.secret.to_s)
  say("\n")
  say("Secret (Base64 Compacted & URL Safe): \n")
  say(@c.secret.to_s)
  say("\n")
  say("Secret has valid_hmac? \n")
  say(@c.secret.valid_hmac?.to_s + "\n")
  say("\n")
  say("Shares:\n")
  @c.shares.each { |s| say s.to_s }
  say("\n========================================\n")

elsif choices[:action] == :decode
  say("\n")
  choices[:secret_k] = ask('How many of shares (k) are required to reveal this secret?  ', Integer) { |q| q.in = 2..512 }

  @c = SecretSharing::Shamir::Container.new(choices[:secret_k])

  say("\n")
  shares =  ask("Enter the '#{choices[:secret_k]}' shares one at a time with a RETURN after each:", lambda { |ans| ans =~ /^-?\d+$/ ? Integer(ans) : ans }) do |q|
    q.gather = choices[:secret_k]
  end

  shares.map { |s| @c << s }

  say("\n")
  if @c.secret?
    say("\n========================================\n")
    say("Decoded Secret:\n\n")
    say("(k) Value: #{choices[:secret_k]}\n")
    say("\n")
    say("Secret (Bignum): \n")
    say(@c.secret.secret.to_s)
    say("\n")
    say("Secret (Base64 Compacted & URL Safe): \n")
    say(@c.secret.to_s)
    say("\n")
    say("\n========================================\n")
  end
end
